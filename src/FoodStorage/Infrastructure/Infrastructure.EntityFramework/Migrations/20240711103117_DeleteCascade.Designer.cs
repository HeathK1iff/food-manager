// <auto-generated />
using System;
using FoodStorage.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FoodStorage.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240711103117_DeleteCascade")]
    partial class DeleteCascade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("BestBeforeDate")
                        .HasColumnType("integer")
                        .HasColumnName("best_before_date");

                    b.Property<double>("MinAmountPerDay")
                        .HasColumnType("double precision")
                        .HasColumnName("min_amount_per_day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_type");

                    b.HasKey("Id");

                    b.ToTable("product");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductHistoryDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Count")
                        .HasColumnType("double precision")
                        .HasColumnName("count");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_history");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductItemDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creating_date");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_item");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.RecipeDto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("recipe");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.UnitDto", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("id");

                    b.Property<double>("Coefficient")
                        .HasColumnType("double precision")
                        .HasColumnName("coefficient");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_type");

                    b.HasKey("Id");

                    b.ToTable("unit");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductHistoryDto", b =>
                {
                    b.HasOne("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductDto", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_producthistory_productid");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductItemDto", b =>
                {
                    b.HasOne("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductDto", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_productitem_productid");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.RecipeDto", b =>
                {
                    b.OwnsMany("FoodStorage.Infrastructure.EntityFramework.Contracts.RecipePositionDto", "Positions", b1 =>
                        {
                            b1.Property<Guid>("RecipeId")
                                .HasColumnType("uuid")
                                .HasColumnName("recipe_id");

                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("product_id");

                            b1.Property<int>("ProductCount")
                                .HasColumnType("integer")
                                .HasColumnName("product_count");

                            b1.Property<string>("UnitId")
                                .IsRequired()
                                .HasColumnType("character varying(4)")
                                .HasColumnName("unit_id");

                            b1.HasKey("RecipeId", "ProductId");

                            b1.HasIndex("ProductId");

                            b1.HasIndex("UnitId");

                            b1.ToTable("recipe_position");

                            b1.HasOne("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductDto", null)
                                .WithMany()
                                .HasForeignKey("ProductId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_recipeposition_productid");

                            b1.WithOwner()
                                .HasForeignKey("RecipeId");

                            b1.HasOne("FoodStorage.Infrastructure.EntityFramework.Contracts.UnitDto", null)
                                .WithMany()
                                .HasForeignKey("UnitId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired()
                                .HasConstraintName("fk_recipeposition_unitid");
                        });

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("FoodStorage.Infrastructure.EntityFramework.Contracts.ProductDto", b =>
                {
                    b.Navigation("ProductItems");
                });
#pragma warning restore 612, 618
        }
    }
}
