services:
  rabbitmq:
    container_name: rabbitmq-container
    image: rabbitmq:3.10.7-management
    hostname: rabbit_mq
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=room5
      - RABBITMQ_DEFAULT_PASS=room5Password
    ports:
      - 15672:15672
    networks:
      - food_net

  postgres:
    container_name: postgres-container
    image: postgres:14.8-alpine3.18
    hostname: postgres
    environment:
      POSTGRES_DB: "foodmanagerdb"
      POSTGRES_USER: "room5"
      POSTGRES_PASSWORD: "room5Password"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    command: 
      -c "max_connections=200"
      -c "shared_buffers=256MB"
    volumes:
      - foodmanagerdb-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d foodmanagerdb -U room5 -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - food_net

  pgadmin:
    container_name: pgadmin-container
    image: dpage/pgadmin4:7.2
    hostname: postgres_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: "foodmanager@room5.com"
      PGADMIN_DEFAULT_PASSWORD: "room5Password"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    networks:
      - food_net
  
  foodauth:
    container_name: food-user-auth
    build: src\FoodUserAuth\FoodUserAuth.WebAPI
    hostname: foodauth
    environment:
      - UserAuth_ConnectionStrings__Default=Host=postgres;Port=5432;Database=foodmanagerdb;Username=room5;Password=room5Password
    ports:
      - "8081:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - food_net

  foodwebui:
    container_name: food-manager-web-ui
    build: src\FoodManager.WebUI
    hostname: foodwebui
    environment:
      - ManagerUI_ConnectionStrings__UserAuthApi=Host=foodauth;Port=8081;Schema=http;ProtocolVersion=1;
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - food_net

  foodstorage:
    container_name: food-storage
    build: src\FoodStorage\FoodStorage.WebAPI
    hostname: foodstorage
    environment:
        - FoodStorage_ConnectionStrings__Default=Host=postgres;Port=5432;Database=foodstoragedb;Username=room5;Password=room5Password
    ports:
        - "8082:80"
    depends_on:
       postgres:
         condition: service_healthy
    restart: unless-stopped
    networks:
        - food_net 
 
  foodsupplier:
    container_name: food-supplier
    build: src\FoodSupplier\FoodSupplier.WebAPI
    hostname: foodsupplier    
    ports:
        - "8083:80"
    restart: unless-stopped
    networks:
        - food_net 

  foodusernotifier:
    container_name: food-user-notifier
    build: src\FoodUserNotifier\FoodUserNotifier.WebAPI
    hostname: foodusernotifier    
    ports:
        - "8084:80"  
    restart: unless-stopped
    networks:
        - food_net 

  foodplanner:
    container_name: food-planner
    build: src\FoodPlanner\FoodPlanner.WebApi
    hostname: foodplanner    
    ports:
        - "8085:80"  
    restart: unless-stopped
    networks:
        - food_net 

volumes:
  foodmanagerdb-data:
  pgadmin-data:

networks:
  food_net:
    driver: bridge